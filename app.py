import requests
import argparse
import yaml


def search(check_vendor, check_product):
    vendor = check_vendor
    product = check_product
    search_url = "search/{}/{}".format(vendor, product)
    base_url = f"https://cve.circl.lu/api/{search_url}"
    print(base_url)
    test = {}
    r = requests.get(url=base_url)

    for each in r.json():
        d = {each['id']:[each["summary"], each["cvss"]]}
        test.update(d)

    print(yaml.dump(test))


def browse(check_vendor):
    vendor = check_vendor
    browse_url = f"{vendor}"
    base_url = f"https://cve.circl.lu/api/browse/{browse_url}"
    test = []
    r = requests.get(url=base_url)

    for each in r.json()["product"]:
        if each not in test:
            test.append(each)
    print(yaml.dump(test))


def list_vendors(letter):
    base_url = "https://cve.circl.lu/api/browse"
    r = requests.get(url=base_url)
    letter = letter[0]
    for each in r.json()['vendor']:
        if each[0] == f'{letter}':
            print(yaml.dump(each, default_flow_style=False))


def parse_args():
    description = ""
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("-s", "--search", action="store_true", help="Requires -v and -p")
    parser.add_argument("-p", "--product", action="store", help="Enter Product name")
    parser.add_argument("-v", "--vendor", action="store", help="Enter vendor")
    parser.add_argument("-l", "--list", action="store", help="List Vendors- Enter First letter of vendor name")
    parser.add_argument("-b", "--browse", action="store_true", help="Requires -v")
    args = parser.parse_args()
    return args


if __name__== "__main__":
    args = parse_args()
    if args.search:
        search(args.vendor, args.product)

    if args.browse:
        browse(args.vendor)

    if args.list:
        list_vendors(args.list)
